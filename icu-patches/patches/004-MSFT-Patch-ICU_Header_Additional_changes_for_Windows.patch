From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jeff Genovy <29107334+jefgen@users.noreply.github.com>
Date: Tue, 25 Jun 2019 23:55:46 -0700
Subject: [PATCH] MSFT Change: Add comment guards to remove additional parts of the
 ICU public headers from the Windows SDK header.

---
 icu/icu/icu4c/source/common/unicode/uchar.h    |  6 ++++++
 icu/icu/icu4c/source/common/unicode/uconfig.h  | 10 ++++++++++
 icu/icu/icu4c/source/common/unicode/umachine.h |  4 ++++
 icu/icu/icu4c/source/common/unicode/unistr.h   |  1 +
 icu/icu/icu4c/source/common/unicode/utypes.h   |  7 +++++++
 icu/icu/icu4c/source/common/unicode/uversion.h |  6 ++++++
 6 files changed, 34 insertions(+)

diff --git a/icu/icu/icu4c/source/common/unicode/uchar.h b/icu/icu/icu4c/source/common/unicode/uchar.h
index d70c964e..d7b0c059 100644
--- a/icu/icu/icu4c/source/common/unicode/uchar.h
+++ b/icu/icu/icu4c/source/common/unicode/uchar.h
@@ -48,6 +48,10 @@ typedef struct USet USet;
 
 U_CDECL_BEGIN
 
+//IGNORE_WINDOWS_HEADERS_START
+// MSFT-Change: The value of these macros can change at runtime, so the API u_getUnicodeVersion
+// should be used instead of any version macro.
+
 /*==========================================================================*/
 /* Unicode version number                                                   */
 /*==========================================================================*/
@@ -62,6 +66,8 @@ U_CDECL_BEGIN
  */
 #define U_UNICODE_VERSION "12.1"
 
+//IGNORE_WINDOWS_HEADERS_END
+
 /**
  * \file
  * \brief C API: Unicode Properties
diff --git a/icu/icu/icu4c/source/common/unicode/uconfig.h b/icu/icu/icu4c/source/common/unicode/uconfig.h
index e61eb579..863d50ad 100644
--- a/icu/icu/icu4c/source/common/unicode/uconfig.h
+++ b/icu/icu/icu4c/source/common/unicode/uconfig.h
@@ -45,6 +45,10 @@
  * @stable ICU 2.4
  */
 
+//IGNORE_WINDOWS_HEADERS_START
+// MSFT-Change: Since these are compile time settings, it doesn't make sense to 
+// load a user config header in the Windows SDK version.
+
 /**
  * If this switch is defined, ICU will attempt to load a header file named "uconfig_local.h"
  * prior to determining default settings for uconfig variables.
@@ -54,6 +58,7 @@
 #if defined(UCONFIG_USE_LOCAL)
 #include "uconfig_local.h"
 #endif
+//IGNORE_WINDOWS_HEADERS_END
 
 /**
  * \def U_DEBUG
@@ -369,6 +374,9 @@
 #   define UCONFIG_MSGPAT_DEFAULT_APOSTROPHE_MODE UMSGPAT_APOS_DOUBLE_OPTIONAL
 #endif
 
+//IGNORE_WINDOWS_HEADERS_START
+// MSFT-Change: We always use the OS LCID mapping API for the Windows OS build of ICU.
+
 /**
  * \def UCONFIG_USE_WINDOWS_LCID_MAPPING_API
  * On platforms where U_PLATFORM_HAS_WIN32_API is true, this switch determines
@@ -381,6 +389,8 @@
 #   define UCONFIG_USE_WINDOWS_LCID_MAPPING_API 1
 #endif
 
+//IGNORE_WINDOWS_HEADERS_END
+
 /* i18n library switches ---------------------------------------------------- */
 
 /**
diff --git a/icu/icu/icu4c/source/common/unicode/umachine.h b/icu/icu/icu4c/source/common/unicode/umachine.h
index 0205da62..34170737 100644
--- a/icu/icu/icu4c/source/common/unicode/umachine.h
+++ b/icu/icu/icu4c/source/common/unicode/umachine.h
@@ -118,6 +118,9 @@
 /** This is used to declare a function as an internal ICU C API  */
 #define U_INTERNAL U_CAPI
 
+//IGNORE_WINDOWS_HEADERS_START
+// MSFT-Change: These are C++ only constructs. The Windows OS version of ICU only exposes
+// the flat C APIs.
+
 /**
  * \def U_OVERRIDE
  * Defined to the C++11 "override" keyword if available.
@@ -140,6 +143,7 @@
 #define U_FINAL final
 #endif
 
+//IGNORE_WINDOWS_HEADERS_END
 
 /*==========================================================================*/
 /* limits for int32_t etc., like in POSIX inttypes.h                        */
diff --git a/icu/icu/icu4c/source/common/unicode/utypes.h b/icu/icu/icu4c/source/common/unicode/utypes.h
index cc9cb5ea..f4ac6ea6 100644
--- a/icu/icu/icu4c/source/common/unicode/utypes.h
+++ b/icu/icu/icu4c/source/common/unicode/utypes.h
@@ -89,6 +89,11 @@
 
 /** @} */
 
+//IGNORE_WINDOWS_HEADERS_START
+// MSFT-Change: For the OS version of ICU, it doesn't make sense to expose these
+// constants which are only for loading the main ICU data file. We also don't 
+// support using a data DLL either, so omit them from the SDK header.
+
 /*===========================================================================*/
 /* ICUDATA naming scheme                                                     */
 /*===========================================================================*/
@@ -181,6 +186,8 @@
 #endif
 #endif  /* U_HIDE_INTERNAL_API */
 
+//IGNORE_WINDOWS_HEADERS_END
+
 /**
  * \def NULL
  * Define NULL if necessary, to nullptr for C++ and to ((void *)0) for C.
diff --git a/icu/icu/icu4c/source/common/unicode/uversion.h b/icu/icu/icu4c/source/common/unicode/uversion.h
index 5700f62c..6d3f5e1f 100644
--- a/icu/icu/icu4c/source/common/unicode/uversion.h
+++ b/icu/icu/icu4c/source/common/unicode/uversion.h
@@ -58,6 +58,10 @@
  */
 typedef uint8_t UVersionInfo[U_MAX_VERSION_LENGTH];
 
+//IGNORE_WINDOWS_HEADERS_START
+// MSFT-Change: Since the OS ICU headers are for C APIs only, we don't
+// need or want any C++ namespace support.
+
 /*===========================================================================*/
 /* C++ namespace if supported. Versioned unless versioning is disabled.      */
 /*===========================================================================*/
@@ -126,6 +130,8 @@ typedef uint8_t UVersionInfo[U_MAX_VERSION_LENGTH];
 #   endif
 #endif /* __cplusplus */
 
+//IGNORE_WINDOWS_HEADERS_END
+
 /*===========================================================================*/
 /* General version helper functions. Definitions in putil.c                  */
 /*===========================================================================*/
-- 
2.20.1.vfs.1.1.104.g2ab7360

